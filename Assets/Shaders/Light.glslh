#include "LightStruct.h"

void BlinnPhong(Light light, vec3 normal, vec3 viewPos, vec3 point, float r, out vec3 diffuse, out vec3 specular) {

	vec3 l = normalize(light.position - point);
	vec3 v = normalize(viewPos - point);
	vec3 h = normalize(l + v);

	float d = length(light.position - point);

	float attenuation = 1.0f / (d*d);

	float lambert = clamp(dot(normal, l), 0.0f, 1.0f);
	float spec	= clamp(dot(normal, h), 0.0f, 1.0f);
	spec = pow(spec, r);

	diffuse		= light.intensity * lambert * attenuation;
	specular	= light.intensity * spec * lambert * attenuation;
}

float CalculateShadow(vec4 pos, sampler2D shadowTex) {
	float shadow = 1.0f;

	vec4 shadowNDC = pos;
	shadowNDC.xyz /= shadowNDC.w;

	if(	abs(shadowNDC.x) <= 1.0f &&
		abs(shadowNDC.y) <= 1.0f &&
		abs(shadowNDC.z) <= 1.0f ) {

		vec3 biasCoord = shadowNDC.xyz * 0.5f + 0.5f;

		float d = texture(shadowTex, biasCoord.xy).r;

		if(d < biasCoord.z - 0.001f) {
			return 0.0f;
		}
	}

	return shadow;
}